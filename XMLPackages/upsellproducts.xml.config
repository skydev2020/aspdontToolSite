<?xml version="1.0" standalone="yes" ?>
<package version="2.1" displayname="Upsell Products" debug="false" includeentityhelper="false">
	<query name="UpsellProducts" rowElementName="Product">
		<sql>
			<![CDATA[
				exec aspdnsf_GetUpsellProducts @productID, @customerlevelID, @invFilter, @storeID, @FilterProduct
            ]]>
		</sql>
		<queryparam paramname="@productID"			paramtype="runtime"		requestparamname="ProductID"									sqlDataType="int"	defvalue="0"	  validationpattern="" />
		<queryparam paramname="@CustomerLevelID"	paramtype="runtime"		requestparamname="CustomerLevelID"								sqlDataType="int"	defvalue="0"	  validationpattern="" />
		<queryparam paramname="@InvFilter"			paramtype="appconfig"	requestparamname="HideProductsWithLessThanThisInventoryLevel"	sqlDataType="int"	defvalue="0"	  validationpattern="" />
		<queryparam paramname="@StoreID"			paramtype="runtime"		requestparamname="StoreID"										sqlDataType="int"	defvalue="1"	  validationpattern="" />
		<queryparam paramname="@FilterProduct"		paramtype="runtime"		requestparamname="FilterProduct"								sqlDataType="bit"	defvalue="0"	  validationpattern="" />
	</query>

	<PackageTransform>
		<xsl:stylesheet version="1.0" xmlns:xsl="http://www.w3.org/1999/XSL/Transform"
                        xmlns:aspdnsf="urn:aspdnsf" exclude-result-prefixes="aspdnsf">
			<xsl:output method="html" omit-xml-declaration="yes" />

			<xsl:param name="ColumnCount" select="aspdnsf:AppConfig('UpsellProductsGridColWidth')"></xsl:param>
			<xsl:variable name="GridItemCssClassName">
				<xsl:choose>
					<xsl:when test="$ColumnCount = 1">col-sm-12</xsl:when>
					<xsl:when test="$ColumnCount = 2">col-sm-6</xsl:when>
					<xsl:when test="$ColumnCount = 3">col-sm-4</xsl:when>
					<xsl:when test="$ColumnCount = 4">col-sm-3</xsl:when>
					<xsl:when test="$ColumnCount = 5">col-sm-5ths</xsl:when>
					<xsl:when test="$ColumnCount = 6">col-sm-2</xsl:when>
					<xsl:otherwise>col-sm-3</xsl:otherwise>
				</xsl:choose>
			</xsl:variable>

			<xsl:variable name="GridItemSmallestClassName">
				<xsl:choose>
					<xsl:when test="ColumnCount mod 2 = 0">col-xs-6</xsl:when>
					<xsl:otherwise>col-sm-12</xsl:otherwise>
				</xsl:choose>
			</xsl:variable>
			<xsl:param name="UpsellProductsCount" select="count(/root/UpsellProducts/Product)"></xsl:param>

			<xsl:variable name="ProductIdsOnPage">
				<xsl:for-each select="/root/UpsellProducts/Product/ProductID">
					<xsl:value-of select="." />
					<xsl:if test="position() != last()">
						<xsl:text>,</xsl:text>
					</xsl:if>
				</xsl:for-each>
			</xsl:variable>
			<xsl:variable name="AvailablePromotions" select="aspdnsf:XmlPackageAsXml('availablePromotions.xml.config', concat('productIdList=', $ProductIdsOnPage))/root/Promotions" />

			<xsl:template match="/">
				<xsl:if test="number($UpsellProductsCount) &gt; 0">
					<xsl:variable name="upsellClickHandlerScript">
						<script type="text/javascript">
							<![CDATA[
								function UpsellClick(theItem)
								{
									var UpsellItemList = '';
									var whichitem = 0;
									var UpsellList = document.getElementsByName('Upsell');
									var UpsellProductList = document.getElementsByName('UpsellProducts');
									for (i=0; i<UpsellList.length; i++)
									{
										if (UpsellList[i].checked && UpsellList[i].value != '0')
										{
											if (UpsellItemList.length > 0)
											{
												UpsellItemList = UpsellItemList + ',';
											}
											UpsellItemList = UpsellItemList + UpsellList[i].value;
										}
									}

									for(j=0; j<UpsellProductList.length; j++)
									{
										UpsellProductList[j].value = UpsellItemList;
									}
								}
							]]>
						</script>
					</xsl:variable>
					<xsl:value-of select="aspdnsf:RegisterInlineScript($upsellClickHandlerScript)" disable-output-escaping="yes" />

					<div class="upsell-products other-products-wrap">
						<h2 class="group-header upsell-items-header other-products-header">
							<xsl:value-of select="aspdnsf:StringResource('Header.UpsellHeader')" disable-output-escaping="yes" />
						</h2>
						<div class="screen-reader-only">
							<xsl:value-of select="$UpsellProductsCount" />
							<xsl:text xml:space="preserve"> </xsl:text>
							<xsl:value-of select="aspdnsf:StringResource('total.screenreader')" disable-output-escaping="yes" />
							<xsl:text xml:space="preserve"> </xsl:text>
							<xsl:value-of select="aspdnsf:StringResource('upsellproducts.screenreader')" disable-output-escaping="yes" />
						</div>
						<xsl:choose>
							<xsl:when test="/root/Runtime/teaser != ''">
								<p class="upsell-teaser">
									<xsl:value-of select="/root/Runtime/teaser" />
								</p>
							</xsl:when>
							<xsl:otherwise>
								<xsl:value-of select="aspdnsf:Topic('UpsellTeaser')" disable-output-escaping="yes" />
							</xsl:otherwise>
						</xsl:choose>
						<fieldset>
							<legend class="screen-reader-only">
								<xsl:value-of select="aspdnsf:StringResource('Header.UpsellHeader')" disable-output-escaping="yes" />
							</legend>
							<div role="list">
								<div class="row list-unstyled upsell-item-row">
									<xsl:apply-templates select="/root/UpsellProducts/Product" />
								</div>
							</div>
						</fieldset>
					</div>
				</xsl:if>
			</xsl:template>

			<xsl:template match="Product">
				<xsl:variable name="Name" select="aspdnsf:GetMLValue(Name)"></xsl:variable>
				<xsl:variable name="SalesPromptName" select="aspdnsf:GetMLValue(SalesPromptName)"></xsl:variable>
				<xsl:variable name="SEAltText" select="aspdnsf:GetMLValue(SEAltText)"></xsl:variable>
				<xsl:variable name="AltText">
					<xsl:choose>
						<xsl:when test="$SEAltText=''">
							<xsl:value-of select="$Name" />
						</xsl:when>
						<xsl:otherwise>
							<xsl:value-of select="$SEAltText" />
						</xsl:otherwise>
					</xsl:choose>
				</xsl:variable>
				<xsl:variable name="ProductID" select="ProductID" />
				<xsl:variable name="IsRecurring" select="HasRecurring" />
				<xsl:variable name="ProductLink" select="aspdnsf:ProductLink(ProductID, SEName, 0)" />
				<xsl:variable name="ImageUrl" select="aspdnsf:ImageUrl(ProductID, 'product', 'icon', 0)" />
				<xsl:variable name="ProductImageLarge" select="aspdnsf:ImageUrl(ProductID, 'product', 'large', 1)" />
				<xsl:variable name="pManufacturerName" select="aspdnsf:GetMLValue(ProductManufacturerName)"/>
				<xsl:variable name="productSKU" select="aspdnsf:GetMLValue(SKU)" />
				<xsl:variable name="pDescription" select="aspdnsf:GetMLValue(Description)"/>
				<xsl:variable name="schemaProductLink" select="aspdnsf:ProductLink(ProductID, SEName, '0', '0', '0', '1')" />
				<xsl:variable name="pManufacturerLink">
					<xsl:choose>
						<xsl:when test="string-length(ProductManufacturerId) &gt; 0 and string-length(ProductManufacturerSEName) &gt; 0">
							<xsl:value-of select="aspdnsf:ManufacturerLink(ProductManufacturerId, ProductManufacturerSEName, '0', '0', '1')" />
						</xsl:when>
					</xsl:choose>
				</xsl:variable>
				<xsl:variable name="fullSku" select="concat($productSKU, SkuSuffix)" />
				<xsl:variable name="productConditionText" select="aspdnsf:RetrieveProductConditionText(Condition)" />
				<xsl:variable name="mpn" select="concat(ManufacturerPartNumber, VariantManufacturerPartNumber)" />
				<xsl:variable name="GTINValue" select="aspdnsf:ValidateGTIN(GTIN)" />
				<xsl:variable name="dimensionUnits" select="aspdnsf:ToLower(aspdnsf:AppConfig('Localization.DimensionUnits'))" />
				<xsl:variable name="weightUnits" select="aspdnsf:ToLower(aspdnsf:AppConfig('Localization.WeightUnits'))" />

				<xsl:if test="position() mod $ColumnCount = 1 and position() &gt; 1">
					<xsl:variable name="NewRowHtml">
						<xsl:text>&lt;/div&gt;&lt;div class="row list-unstyled upsell-item-row"&gt;</xsl:text>
					</xsl:variable>
					<xsl:value-of select="$NewRowHtml" disable-output-escaping="yes" />
				</xsl:if>

				<div role="listitem" class="{$GridItemCssClassName} {$GridItemSmallestClassName} product-grid-item upsell-item" itemprop="isRelatedTo" itemscope="" itemtype="https://schema.org/Product">
					<div class="grid-item-inner">
						<xsl:if test="string-length($GTINValue) &gt; 0">
							<meta itemprop="{substring-before($GTINValue, '|')}" content="{substring-after($GTINValue, '|')}"/>
						</xsl:if>
						<xsl:if test="string-length($mpn) &gt; 0">
							<meta itemprop="mpn" content="{$mpn}"/>
						</xsl:if>
						<xsl:if test="string-length(Dimensions) &gt; 0 and string-length($dimensionUnits) &gt; 0">
							<xsl:variable name="pWidth" select="aspdnsf:RetrieveDimension(Dimensions, 'width')" />
							<xsl:if test="string-length($pWidth) &gt; 0">
								<span itemprop="width" itemscope="" itemtype="https://schema.org/QuantitativeValue">
									<meta itemprop="value" content="{$pWidth}"/>
									<meta itemprop="unitText" content="{$dimensionUnits}"/>
								</span>
							</xsl:if>
							<xsl:variable name="pHeight" select="aspdnsf:RetrieveDimension(Dimensions, 'height')" />
							<xsl:if test="string-length($pHeight) &gt; 0">
								<span itemprop="height" itemscope="" itemtype="https://schema.org/QuantitativeValue">
									<meta itemprop="value" content="{$pHeight}"/>
									<meta itemprop="unitText" content="{$dimensionUnits}"/>
								</span>
							</xsl:if>
							<xsl:variable name="pDepth" select="aspdnsf:RetrieveDimension(Dimensions, 'depth')" />
							<xsl:if test="string-length($pDepth) &gt; 0">
								<span itemprop="depth" itemscope="" itemtype="https://schema.org/QuantitativeValue">
									<meta itemprop="value" content="{$pDepth}"/>
									<meta itemprop="unitText" content="{$dimensionUnits}"/>
								</span>
							</xsl:if>
						</xsl:if>
						<xsl:if test="string-length(Weight) &gt; 0 and string-length($weightUnits) &gt; 0">
							<xsl:variable name="pWeight" select="aspdnsf:ValidateWeight(Weight)" />
							<xsl:if test="string-length($pWeight) &gt; 0">
								<span itemprop="weight" itemscope="" itemtype="https://schema.org/QuantitativeValue">
									<meta itemprop="value" content="{aspdnsf:FormatDecimal($pWeight, '2')}"/>
									<meta itemprop="unitText" content="{$weightUnits}"/>
								</span>
							</xsl:if>
						</xsl:if>
						<xsl:if test="string-length($productConditionText) &gt; 0">
							<link itemprop="itemCondition" href="{concat('https://schema.org/', concat($productConditionText, 'Condition'))}" />
						</xsl:if>
						<xsl:if test="string-length($fullSku) &gt; 0">
							<meta itemprop="sku" content="{$fullSku}"/>
						</xsl:if>
						<xsl:if test="$ProductID &gt; 0">
							<meta itemprop="productID" content="{$ProductID}"/>
						</xsl:if>
						<xsl:if test="((string-length($ProductImageLarge) &gt; 0) and (contains(substring-after($ProductImageLarge, 'images/'),'.')) and (not(contains($ProductImageLarge, 'nopicture.gif'))) and (not(contains($ProductImageLarge, 'nopictureicon.gif'))))">
							<!--This is necessary to escape ampersands in watermaked urls-->
							<xsl:variable name="BeginningImageMetaTag">
								<xsl:text>&lt;meta itemprop="image" content="</xsl:text>
							</xsl:variable>
							<xsl:variable name="EndImageMetaTag">
								<xsl:text>" /&gt;</xsl:text>
							</xsl:variable>
							<xsl:value-of select="$BeginningImageMetaTag" disable-output-escaping="yes" />
							<xsl:value-of select="$ProductImageLarge" disable-output-escaping="yes" />
							<xsl:value-of select="$EndImageMetaTag" disable-output-escaping="yes" />
						</xsl:if>
						<xsl:if test="((string-length($pManufacturerName) &gt; 0) or (string-length($pManufacturerLink) &gt; 0))">
							<span itemprop="manufacturer" itemscope="" itemtype="https://schema.org/Organization">
								<xsl:if test="string-length($pManufacturerName) &gt; 0">
									<meta itemprop="name" content="{$pManufacturerName}"/>
								</xsl:if>
								<xsl:if test="string-length($pManufacturerLink) &gt; 0">
									<meta itemprop="url" content="{$pManufacturerLink}"/>
								</xsl:if>
							</span>
						</xsl:if>
						<xsl:if test="string-length($Name) &gt; 0">
							<meta itemprop="name" content="{$Name}"/>
						</xsl:if>
						<xsl:if test="string-length($pDescription) &gt; 0">
							<meta itemprop="description" content="{$pDescription}"/>
						</xsl:if>
						<xsl:if test="string-length($schemaProductLink) &gt; 0">
							<meta itemprop="url" content="{$schemaProductLink}"/>
						</xsl:if>
						<a href="{$ProductLink}" class="upsell-product-link grid-product-link">
							<div class="upsell-item-image-wrap grid-item-image-wrap">
								<img src="{$ImageUrl}" alt="{$AltText}" class="grid-item-image product-image upsell-item-image" />
							</div>
							<div id="upsell-item-name-wrap-{$ProductID}" class="grid-item-name-wrap upsell-item-name-wrap">
								<xsl:value-of select="$Name" disable-output-escaping="yes" />
							</div>
						</a>
						<xsl:if test="aspdnsf:AppConfigBool('DisplayOutOfStockProducts') = 'true'">
							<div class="upsell-item-stock-wrap">
								<xsl:value-of select="aspdnsf:DisplayProductStockHint(ProductID,'Entity')" disable-output-escaping="yes" />
							</div>
						</xsl:if>
						<div class="grid-item-price-wrap upsell-item-price-wrap">
							<xsl:value-of select="aspdnsf:GetUpsellVariantPrice(VariantID, HidePriceUntilCart, Price, SalePrice, ExtendedPrice, Points, aspdnsf:GetMLValue(SalesPromptName), 0, TaxClassID, UpsellDiscMultiplier, ProductID)" disable-output-escaping="yes" />
						</div>
						<div class="upsell-item-checkbox-wrap">
							<input type="checkbox" id="Upsell" name="Upsell" value="{ProductID}" aria-labelledby="upsell-item-name-wrap-{$ProductID}">
								<xsl:if test="number($UpsellProductsCount) &gt; 0">
									<xsl:attribute name="OnClick">UpsellClick(this);</xsl:attribute>
								</xsl:if>
							</input>
						</div>
						<xsl:if test="$IsRecurring = 'True'">
							<div class="recurring-call-to-action">
								<xsl:value-of select="aspdnsf:StringResource('product.CallToAction.IsRecurring')" disable-output-escaping="yes" />
							</div>
						</xsl:if>
						<xsl:apply-templates select="$AvailablePromotions/Promotion[ProductId=$ProductID]" />
					</div>
				</div>
				<!-- Break to two columns if we can on the smallest viewport -->
				<xsl:if test="$ColumnCount mod 2 = 0 and position() mod 2 = 0">
					<div class="clearfix visible-xs entity-product-extra-small-clear"></div>
				</xsl:if>
			</xsl:template>

			<xsl:template match="Promotion">
				<div class="promotion-call-to-action">
					<xsl:value-of select="CallToAction" disable-output-escaping="yes" />
				</div>
			</xsl:template>
		</xsl:stylesheet>
	</PackageTransform>
</package>
