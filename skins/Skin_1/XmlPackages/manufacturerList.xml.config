<?xml version="1.0" standalone="yes" ?>
<package version="2.1" displayname="A-Z List of manufacturers" debug="false" includeentityhelper="true" allowengine="true">

	<!-- ###################################################################################################### -->
	<!-- Copyright AspDotNetStorefront.com, 1995-2009.  All Rights Reserved.					                -->
	<!-- http://www.aspdotnetstorefront.com														                -->
	<!-- For details on this license please visit  the product homepage at the URL above.		                -->
	<!-- THE ABOVE NOTICE MUST REMAIN INTACT.                                                                   -->
	<!--                                                                                                        -->
	<!-- ###################################################################################################### -->

    <PackageTransform>
    
        <xsl:stylesheet version="1.0" xmlns:xsl="http://www.w3.org/1999/XSL/Transform" xmlns:aspdnsf="urn:aspdnsf" exclude-result-prefixes="aspdnsf">
          <xsl:output method="html" omit-xml-declaration="yes" />
          
          <xsl:param name="LocaleSetting" select="/root/Runtime/LocaleSetting" />
          <xsl:param name="WebConfigLocaleSetting" select="/root/Runtime/WebConfigLocaleSetting" />
          <xsl:param name="ShowSubcatsInGrid"><xsl:value-of select="aspdnsf:AppConfig('ShowSubcatsInGrid')" /></xsl:param>          
          <xsl:param name="WholesaleOnlySite"><xsl:value-of select="aspdnsf:AppConfigBool('WholesaleOnlySite')"/></xsl:param>
          <xsl:param name="EntityName" select="'Manufacturer'" />
          <xsl:param name="brandNodes" select="/root/EntityHelpers/Manufacturer//Entity[ParentEntityID = 0]" />
          <xsl:param name="SubcatGridCols">
              <xsl:choose>
                  <xsl:when test="$brandNodes/Entity/ColWidth">
                      <xsl:value-of select="$brandNodes/Entity/ColWidth" />
                  </xsl:when>
                  <xsl:otherwise>1</xsl:otherwise>
              </xsl:choose>
          </xsl:param>
  

            <xsl:template match="/">
              <div id="top"></div>
                <div id="entity-list-page-wrap">
                    <h1>
                        <xsl:value-of select="aspdnsf:StringResource('AppConfig.ManufacturerPromptPlural', /root/Runtime/LocaleSetting)" disable-output-escaping="yes" />
                    </h1>
                    <div id="entityDescriptionWrap">
                        <xsl:value-of select="aspdnsf:Topic('Vortx.ManufacturerList.Header')" disable-output-escaping="yes" />
                    </div>
              
                  <div id="allBrandsTable">
                      <div id="affixMenu" class="hidden-xs brands-sidebar">
                        <a href="#top" class="brandNavLink">TOP</a>
                        <a href="#0-9" class="brandNavLink">0-9</a>
                        <a href="#A-B" class="brandNavLink">A-B</a>
                        <a href="#C-D" class="brandNavLink">C-D</a>
                        <a href="#E-F" class="brandNavLink">E-F</a>
                        <a href="#G-H" class="brandNavLink">G-H</a>
                        <a href="#I-J" class="brandNavLink">I-J</a>
                        <a href="#K-L" class="brandNavLink">K-L</a>
                        <a href="#M-O" class="brandNavLink">M-O</a>
                        <a href="#P-Q" class="brandNavLink">P-Q</a>
                        <a href="#R-S" class="brandNavLink">R-S</a>
                        <a href="#T-Z" class="brandNavLink">T-Z</a>
                      </div>
              
                    <xsl:call-template name="AlphabatizedTable" />
                    <!--<xsl:call-template name="BrandRow">
                    <xsl:with-param name="nodeSet" select="$brandNodes" />
                    <xsl:with-param name="currentRow" select="1" />
                  </xsl:call-template>-->
                  </div>
               </div>

              <script type="text/javascript">
                $( document ).ready(function() {
                  setTimeout(function(){ $('#affixMenu').addClass('nudge-menu'); }, 1000);
                });
              </script>
                <div style="clear:both"></div>
            </xsl:template>

          <xsl:template name="AlphabatizedTable">
            <xsl:call-template name="getComparison">
              <xsl:with-param name="letter">0123456789</xsl:with-param>
              <xsl:with-param name="heading">0-9</xsl:with-param>
            </xsl:call-template>
            <xsl:call-template name="getComparison">
              <xsl:with-param name="letter">AB</xsl:with-param>
              <xsl:with-param name="heading">A-B</xsl:with-param>
            </xsl:call-template>
            <xsl:call-template name="getComparison">
              <xsl:with-param name="letter">CD</xsl:with-param>
              <xsl:with-param name="heading">C-D</xsl:with-param>
            </xsl:call-template>
            <xsl:call-template name="getComparison">
              <xsl:with-param name="letter">EF</xsl:with-param>
              <xsl:with-param name="heading">E-F</xsl:with-param>
            </xsl:call-template>
            <xsl:call-template name="getComparison">
              <xsl:with-param name="letter">GH</xsl:with-param>
              <xsl:with-param name="heading">G-H</xsl:with-param>
            </xsl:call-template>
            <xsl:call-template name="getComparison">
              <xsl:with-param name="letter">IJ</xsl:with-param>
              <xsl:with-param name="heading">I-J</xsl:with-param>
            </xsl:call-template>
            <xsl:call-template name="getComparison">
              <xsl:with-param name="letter">KL</xsl:with-param>
              <xsl:with-param name="heading">K-L</xsl:with-param>
            </xsl:call-template>
            <xsl:call-template name="getComparison">
              <xsl:with-param name="letter">MNO</xsl:with-param>
              <xsl:with-param name="heading">M-O</xsl:with-param>
            </xsl:call-template>
            <xsl:call-template name="getComparison">
              <xsl:with-param name="letter">PQ</xsl:with-param>
              <xsl:with-param name="heading">P-Q</xsl:with-param>
            </xsl:call-template>
            <xsl:call-template name="getComparison">
              <xsl:with-param name="letter">RS</xsl:with-param>
              <xsl:with-param name="heading">R-S</xsl:with-param>
            </xsl:call-template>
            <xsl:call-template name="getComparison">
              <xsl:with-param name="letter">TUVWXYZ</xsl:with-param>
              <xsl:with-param name="heading">T-Z</xsl:with-param> 
            </xsl:call-template>           
          </xsl:template>

          <xsl:template name="getComparison">
            <xsl:param name="letter" />
            <xsl:param name="heading" />
            <xsl:param name="set" select="$brandNodes[contains($letter, aspdnsf:StrToUpper(substring(normalize-space(Name), 1, 1)))]" />
           
            <div class="brand-section-wrapper">
                  <div class="brandHeader">
                    <div id="{$heading}" class="brand-list-heading">
                        <xsl:value-of select="$heading"/>
                    </div>
                  </div>
              <div class="row brand-row">
                <xsl:call-template name="BrandRow">
                  <xsl:with-param name="nodeSet" select="$set" />
                  <xsl:with-param name="currentRow" select="1" />
                </xsl:call-template>
              </div>
            </div>
            
          </xsl:template>

          <xsl:template name="BrandRow">
           
            <xsl:param name="nodeSet"></xsl:param>
            <xsl:param name="currentRow"></xsl:param>
            <xsl:param name="numBrands" select="count($nodeSet)" />
            <xsl:param name="numRows">
              <xsl:choose>
                <xsl:when test="$numBrands div $SubcatGridCols &lt; 1">1</xsl:when>
                <xsl:otherwise>
                  <xsl:value-of select="$numBrands div $SubcatGridCols" />
                </xsl:otherwise>
              </xsl:choose>
            </xsl:param>
            <xsl:param name="rowRemainder">
              <xsl:choose>
                <xsl:when test="$numRows > 1">
                  <xsl:value-of select="$numBrands mod $SubcatGridCols" />
                </xsl:when>
                <xsl:otherwise>0</xsl:otherwise>
              </xsl:choose>
            </xsl:param>
            <xsl:param name="maxProdPerCol" select="ceiling($numRows)" />
            <xsl:param name="minProdPerCol" select="floor($numRows)" />

            <div class="col-sm-6 col-md-4">
              <xsl:call-template name="BrandCol">
                <xsl:with-param name="nodeSet" select="$nodeSet" />
                <xsl:with-param name="currentRow" select="$currentRow" />
                <xsl:with-param name="currentCol" select="1" />                
              </xsl:call-template>
            </div>
            
            <xsl:if test="$currentRow &lt; ceiling($numRows)">
              <xsl:call-template name="BrandRow">
                <xsl:with-param name="nodeSet" select="$nodeSet" />
                <xsl:with-param name="currentRow" select="$currentRow + 1" />
              </xsl:call-template>
            </xsl:if>
          </xsl:template>

          <xsl:template name="BrandCol">
            <xsl:param name="nodeSet"></xsl:param>
            <xsl:param name="currentRow"></xsl:param>
            <xsl:param name="currentCol"></xsl:param>
            <xsl:param name="lastPosition">1</xsl:param>
            <xsl:param name="numBrands" select="count($nodeSet)" />
            <xsl:param name="numRows">
              <xsl:choose>
                <xsl:when test="$numBrands div $SubcatGridCols &lt; 1">1</xsl:when>
                <xsl:otherwise>
                  <xsl:value-of select="$numBrands div $SubcatGridCols" />
                </xsl:otherwise>
              </xsl:choose>
            </xsl:param>
            <xsl:param name="rowRemainder">
              <xsl:choose>
                <xsl:when test="$numRows > 1">
                  <xsl:value-of select="$numBrands mod $SubcatGridCols" />
                </xsl:when>
                <xsl:otherwise>0</xsl:otherwise>
              </xsl:choose>
            </xsl:param>
            <xsl:param name="maxProdPerCol" select="ceiling($numRows)" />
            <xsl:param name="minProdPerCol" select="floor($numRows)" />
            <xsl:param name="brandPosition">
              <xsl:choose>
                <xsl:when test="$currentCol = 1"><xsl:value-of select="$currentRow"/></xsl:when>
                <xsl:when test="($rowRemainder > 0) and ($currentCol - 1 &lt;= $rowRemainder)"><xsl:value-of select="$lastPosition + $maxProdPerCol" /></xsl:when>
                <xsl:otherwise><xsl:value-of select="$lastPosition + $minProdPerCol" /></xsl:otherwise>
              </xsl:choose>
            </xsl:param>            
              
            <xsl:choose>
              <xsl:when test="($nodeSet[position() = $brandPosition] and not($currentCol > $rowRemainder and $currentRow = $maxProdPerCol)) or ($nodeSet[position() = $brandPosition] and $rowRemainder = 0)">
                <xsl:variable name="currentNode" select="$nodeSet[position() = $brandPosition]" />
                <xsl:variable name="URL"><xsl:value-of select="aspdnsf:EntityLink($currentNode/EntityID, $currentNode/SEName, $EntityName, 0, '')" /></xsl:variable>
                  <a href="{$URL}" title="{aspdnsf:GetMLValue($currentNode/Name)}" class="brand-links">
                    <xsl:value-of select="aspdnsf:GetMLValue($currentNode/Name)" />
                  </a>
                <xsl:if test="$currentCol &lt; $SubcatGridCols">
                  <xsl:call-template name="BrandCol">
                    <xsl:with-param name="nodeSet" select="$nodeSet" />
                    <xsl:with-param name="currentRow" select="$currentRow" />
                    <xsl:with-param name="currentCol" select="$currentCol + 1" />
                    <xsl:with-param name="lastPosition" select="$brandPosition" />
                  </xsl:call-template>
                </xsl:if>
                
              </xsl:when>
              <xsl:otherwise>
                <xsl:call-template name="FillerCells">
                  <xsl:with-param name="cellCount" select="$SubcatGridCols - $currentCol + 1" />
                </xsl:call-template>
              </xsl:otherwise>
            </xsl:choose>
            
          </xsl:template>

          <xsl:template name="FillerCells">
            <xsl:param name="cellCount"/>
            <xsl:param name="CellWidth">
              <xsl:choose>
                <xsl:when test="$SubcatGridCols = 1">col-xs-12</xsl:when>
                <xsl:when test="$SubcatGridCols = 2">col-sm-6</xsl:when>
                <xsl:when test="$SubcatGridCols = 3">col-sm-4</xsl:when>
                <xsl:when test="$SubcatGridCols = 4">col-sm-3</xsl:when>
                <xsl:when test="$SubcatGridCols = 5">col-sm-2</xsl:when>
                <xsl:when test="$SubcatGridCols = 6">col-sm-1</xsl:when>
              </xsl:choose>
            </xsl:param>
            
            
            <div width="{$CellWidth}">
            </div>
            <xsl:if test="$cellCount > 1">
              <xsl:call-template name="FillerCells">
                <xsl:with-param name="cellCount" select="$cellCount - 1"/>
              </xsl:call-template>
            </xsl:if>
          </xsl:template>

        </xsl:stylesheet>
    </PackageTransform>
</package>
