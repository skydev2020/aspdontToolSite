<?xml version="1.0" standalone="yes" ?>
<!-- This XML package displays information for simple single-variant products.  -->
<!-- This package is not designed for truly responsive skins, however it uses a basic grid system that will make pages somewhat resizeable. -->
<package version="2.1" displayname="Simple Product With A Large Image" debug="false" includeentityhelper="true">
	<query name="Products" rowElementName="Product" runif="showproduct">
		<sql>
			<![CDATA[
				exec dbo.aspdnsf_ProductInfo
					@ProductID = @ProductID,
					@CustomerLevelID = @CustomerLevelID,
					@DefaultVariantOnly = 0,
					@AffiliateID = @AffiliateID,
					@StoreID = @StoreID
      ]]>
		</sql>
		<queryparam paramname="@ProductID"				paramtype="request"	requestparamname="ProductID"				sqlDataType="int"	defvalue="0"	validationpattern="^\d{1,10}$" />
		<queryparam paramname="@CustomerLevelID"	paramtype="runtime"	requestparamname="CustomerLevelID"	sqlDataType="int"	defvalue="0"	validationpattern="" />
		<queryparam paramname="@AffiliateID"			paramtype="system"	requestparamname="AffiliateID"			sqlDataType="int"	defvalue="0"	validationpattern="" />
		<queryparam paramname="@StoreID"					paramtype="runtime"	requestparamname="StoreID"					sqlDataType="int"	defvalue="1"	validationpattern="" />
	</query>


	<query name="Products" rowElementName="Product" runif="edit">
		<sql>
			<![CDATA[
                exec dbo.aspdnsf_EditOrderProduct @ShoppingCartRecID, @CustomerLevelID
            ]]>
		</sql>
		<queryparam paramname="@ShoppingCartRecID" paramtype="request" requestparamname="CartRecID"       sqlDataType="int" defvalue="0"  validationpattern="^\d{1,10}$" />
		<queryparam paramname="@CustomerLevelID"   paramtype="system"  requestparamname="CustomerLevelID" sqlDataType="int" defvalue="0"  validationpattern="" />
	</query>

	<PackageTransform>
		<xsl:stylesheet version="1.0" xmlns:xsl="http://www.w3.org/1999/XSL/Transform" xmlns:aspdnsf="urn:aspdnsf" exclude-result-prefixes="aspdnsf">
			<xsl:output method="html" omit-xml-declaration="yes" />

			<xsl:param name="XmlPackageName" select="/root/System/XmlPackageName" />

			<xsl:param name="CatID">
				<xsl:choose>
					<xsl:when test="count(/root/QueryString/categoryid) &gt; 0">
						<xsl:value-of select="/root/QueryString/categoryid" />
					</xsl:when>
					<xsl:otherwise>0</xsl:otherwise>
				</xsl:choose>
			</xsl:param>
			<xsl:variable name="ProductIdsOnPage">
				<xsl:for-each select="/root/Products/Product/ProductID">
					<xsl:value-of select="." />
					<xsl:if test="position() != last()">
						<xsl:text>,</xsl:text>
					</xsl:if>
				</xsl:for-each>
			</xsl:variable>
			<xsl:variable name="AvailablePromotions" select="aspdnsf:XmlPackageAsXml('availablePromotions.xml.config', concat('productIdList=', $ProductIdsOnPage))/root/Promotions" />
			<xsl:variable name="schemaProductUrl" select="concat(aspdnsf:GetCurrentProtocol(), '://schema.org/Product')"/>

			<!-- This is the main template for this package.  It runs once regardless of how this product is configured. -->
			<xsl:template match="/">
				<div class="page-wrap product-landing-page" itemscope="" itemtype="{$schemaProductUrl}">
					<xsl:choose>
						<xsl:when test="count(root/Products/Product) &gt; 1">
							<xsl:for-each select="/root/Products/Product[position()=1]">
								<xsl:call-template name="MultiVariant"/>
							</xsl:for-each>
						</xsl:when>
						<xsl:otherwise>
							<xsl:apply-templates select="/root/Products/Product" />
						</xsl:otherwise>
					</xsl:choose>
				</div>
			</xsl:template>

			<!-- Runs if the product contains more than one variant. -->
			<xsl:template name="MultiVariant">
				<div class="page-row">
					Display of multi-variant products is not supported by this XmlPackage. XmlPackage=<xsl:value-of select="$XmlPackageName" />
				</div>
			</xsl:template>

			<!-- Runs if the product contains only one variant. -->
			<xsl:template match="Product">
				<xsl:param name="pName" select="aspdnsf:GetMLValue(Name)"></xsl:param>
				<xsl:param name="pDescription" select="aspdnsf:GetMLValue(Description)"></xsl:param>
				<xsl:param name="pSummary" select="aspdnsf:GetMLValue(Summary)"></xsl:param>
				<xsl:param name="pSalesPromptName" select="aspdnsf:GetMLValue(SalesPromptName)"></xsl:param>
				<xsl:param name="AltText">
					<xsl:choose>
						<xsl:when test="aspdnsf:GetMLValue(SEAltText)=''">
							<xsl:value-of select="aspdnsf:GetMLValue(Name)" />
						</xsl:when>
						<xsl:otherwise>
							<xsl:value-of select="aspdnsf:GetMLValue(SEAltText)" />
						</xsl:otherwise>
					</xsl:choose>
				</xsl:param>
				<xsl:variable name="productId" select="ProductID" />
				<xsl:variable name="pManufacturerName" select="aspdnsf:GetMLValue(ProductManufacturerName)"/>
				<xsl:variable name="showRatings" select="aspdnsf:AppConfigBool('RatingsEnabled')"/>
				<xsl:variable name="productSKU" select="/root/Products/Product/SKU" />
				<xsl:variable name="pImageLarge" select="aspdnsf:ProductImageUrl(ProductID, ImageFilenameOverride, SKU, 'large', 1)"/>
				<xsl:variable name="schemaOfferUrl" select="concat(aspdnsf:GetCurrentProtocol(), '://schema.org/Offer')"/>
				<xsl:variable name="schemaOrganizationUrl" select="concat(aspdnsf:GetCurrentProtocol(), '://schema.org/Organization')"/>
				<xsl:variable name="schemaProductLink" select="aspdnsf:ProductLink(ProductID, SEName, '0', '0', '0', '1')" />
				<xsl:variable name="pManufacturerLink">
					<xsl:choose>
						<xsl:when test="string-length(ProductManufacturerId) &gt; 0 and string-length(ProductManufacturerSEName) &gt; 0">
							<xsl:value-of select="aspdnsf:ManufacturerLink(ProductManufacturerId, ProductManufacturerSEName, '0', '0', '1')" />
						</xsl:when>
					</xsl:choose>
				</xsl:variable>
				<xsl:variable name="fullSku" select="concat($productSKU, SkuSuffix)" />
				<xsl:variable name="productConditionText" select="aspdnsf:RetrieveProductConditionText(Condition)" />
				<xsl:variable name="mpn" select="concat(ManufacturerPartNumber, VariantManufacturerPartNumber)" />
				<xsl:variable name="GTINValue" select="aspdnsf:ValidateGTIN(GTIN)" />
				<xsl:variable name="stockStatusText" select="aspdnsf:GetStockStatusText(ProductID, VariantID, 'Product')" />
				<xsl:variable name="dimensionUnits" select="aspdnsf:ToLower(aspdnsf:AppConfig('Localization.DimensionUnits'))" />
				<xsl:variable name="weightUnits" select="aspdnsf:ToLower(aspdnsf:AppConfig('Localization.WeightUnits'))" />
				<xsl:variable name="SelectedSize" select="/root/QueryString/size" />
				<xsl:variable name="SelectedColor" select="/root/QueryString/color" />

				<xsl:choose>
					<xsl:when test="IsAKit=1">
						<div class="page-row">
							Display of Kit Products is not supported by this XmlPackage. XmlPackage=<xsl:value-of select="$XmlPackageName" />
						</div>
					</xsl:when>
					<xsl:otherwise>
						<xsl:if test="string-length($GTINValue) &gt; 0">
							<meta itemprop="{substring-before($GTINValue, '|')}" content="{substring-after($GTINValue, '|')}"/>
						</xsl:if>
						<xsl:if test="string-length($mpn) &gt; 0">
							<meta itemprop="mpn" content="{$mpn}"/>
						</xsl:if>
						<xsl:if test="string-length(Dimensions) &gt; 0 and string-length($dimensionUnits) &gt; 0">
							<xsl:variable name="pWidth" select="aspdnsf:RetrieveDimension(Dimensions, 'width')" />
							<xsl:if test="string-length($pWidth) &gt; 0">
								<span itemprop="width" itemscope="" itemtype="{concat(aspdnsf:GetCurrentProtocol(), '://schema.org/QuantitativeValue')}">
									<meta itemprop="value" content="{$pWidth}"/>
									<meta itemprop="unitText" content="{$dimensionUnits}"/>
								</span>
							</xsl:if>
							<xsl:variable name="pHeight" select="aspdnsf:RetrieveDimension(Dimensions, 'height')" />
							<xsl:if test="string-length($pHeight) &gt; 0">
								<span itemprop="height" itemscope="" itemtype="{concat(aspdnsf:GetCurrentProtocol(), '://schema.org/QuantitativeValue')}">
									<meta itemprop="value" content="{$pHeight}"/>
									<meta itemprop="unitText" content="{$dimensionUnits}"/>
								</span>
							</xsl:if>
							<xsl:variable name="pDepth" select="aspdnsf:RetrieveDimension(Dimensions, 'depth')" />
							<xsl:if test="string-length($pDepth) &gt; 0">
								<span itemprop="depth" itemscope="" itemtype="{concat(aspdnsf:GetCurrentProtocol(), '://schema.org/QuantitativeValue')}">
									<meta itemprop="value" content="{$pDepth}"/>
									<meta itemprop="unitText" content="{$dimensionUnits}"/>
								</span>
							</xsl:if>
						</xsl:if>
						<xsl:if test="string-length(Weight) &gt; 0 and string-length($weightUnits) &gt; 0">
							<xsl:variable name="pWeight" select="aspdnsf:ValidateWeight(Weight)" />
							<xsl:if test="string-length($pWeight) &gt; 0">
								<span itemprop="weight" itemscope="" itemtype="{concat(aspdnsf:GetCurrentProtocol(), '://schema.org/QuantitativeValue')}">
									<meta itemprop="value" content="{aspdnsf:FormatDecimal($pWeight, '2')}"/>
									<meta itemprop="unitText" content="{$weightUnits}"/>
								</span>
							</xsl:if>
						</xsl:if>
						<xsl:if test="string-length($productConditionText) &gt; 0">
							<link itemprop="itemCondition" href="{concat(aspdnsf:GetCurrentProtocol(), '://schema.org/', concat($productConditionText, 'Condition'))}" />
						</xsl:if>
						<xsl:if test="string-length($fullSku) &gt; 0">
							<meta itemprop="sku" content="{$fullSku}"/>
						</xsl:if>
						<xsl:if test="$productId &gt; 0">
							<meta itemprop="productID" content="{$productId}"/>
						</xsl:if>
						<xsl:if test="((string-length($pImageLarge) &gt; 0) and (contains(substring-after($pImageLarge, 'images/'),'.')) and (not(contains($pImageLarge, 'nopicture.gif'))) and (not(contains($pImageLarge, 'nopictureicon.gif'))))">
							<!--This is necessary to escape ampersands in watermaked urls-->
							<xsl:variable name="BeginningImageMetaTag">
								<xsl:text>&lt;meta itemprop="image" content="</xsl:text>
							</xsl:variable>
							<xsl:variable name="EndImageMetaTag">
								<xsl:text>" /&gt;</xsl:text>
							</xsl:variable>
							<xsl:value-of select="$BeginningImageMetaTag" disable-output-escaping="yes" />
							<xsl:value-of select="$pImageLarge" disable-output-escaping="yes" />
							<xsl:value-of select="$EndImageMetaTag" disable-output-escaping="yes" />
						</xsl:if>
						<xsl:if test="((string-length($pManufacturerName) &gt; 0) or (string-length($pManufacturerLink) &gt; 0))">
							<span itemprop="manufacturer" itemscope="" itemtype="{$schemaOrganizationUrl}">
								<xsl:if test="string-length($pManufacturerName) &gt; 0">
									<meta itemprop="name" content="{$pManufacturerName}"/>
								</xsl:if>
								<xsl:if test="string-length($pManufacturerLink) &gt; 0">
									<meta itemprop="url" content="{$pManufacturerLink}"/>
								</xsl:if>
							</span>
						</xsl:if>
						<xsl:if test="string-length($schemaProductLink) &gt; 0">
							<meta itemprop="url" content="{$schemaProductLink}"/>
						</xsl:if>
						<style type="text/css">
							.vertical-nav-wrapper
							{
							display:none;
							}
							.content-wrapper
							{
							float:none;
							width:100%;
							}
						</style>
						<h1 class="product-page-header" itemprop="name">
							<xsl:value-of select="$pName" disable-output-escaping="yes" />
						</h1>
						<div class="row">
							<div class="col-sm-6">
								<div class="product-banner">
									<div class="product-image-banner product-image-wrap">
										<img class="product-image" src="{aspdnsf:ImageUrl(ProductID, 'product', 'large', 0)}" alt="{$AltText}" />
									</div>
								</div>
							</div>
							<div class="col-sm-6">
								<div class="product-info">
									<xsl:if test="number(CustomerEntersPrice)=0">
										<div class="price-tag">
											<!-- Add a dynamically-named div to the page that the add to cart form will look for to find the price -->
											<div itemprop="offers" itemscope="" itemtype="{$schemaOfferUrl}">
												<xsl:attribute name="id">
													VariantPrice_<xsl:value-of select="VariantID"/>
												</xsl:attribute>
												<xsl:if test="string-length($stockStatusText) &gt; 0">
													<link itemprop="availability" href="{concat(aspdnsf:GetCurrentProtocol(), '://schema.org/', substring-before($stockStatusText, '|'))}" />
												</xsl:if>
												<xsl:value-of select="aspdnsf:GetVariantPrice(VariantID, number(HidePriceUntilCart), Price, SalePrice, ExtendedPrice, Points, $pSalesPromptName, TaxClassID)" disable-output-escaping="yes" />
											</div>
										</div>
									</xsl:if>
									<div class="add-to-cart-row">
										<xsl:value-of select="aspdnsf:AddtoCartForm(ProductID, VariantID, 1, 1, $SelectedSize, $SelectedColor)" disable-output-escaping="yes"/>
									</div>
									<xsl:if test="$AvailablePromotions/Promotion[ProductId=$productId]">
										<div class="product-promotions">
											<xsl:apply-templates select="$AvailablePromotions/Promotion[ProductId=$productId]" />
										</div>
									</xsl:if>
									<xsl:if test="$pSummary">
										<div class="product-summary">
											<div class="summary-content">
												<xsl:value-of select="$pSummary" disable-output-escaping="yes"/>
											</div>
										</div>
									</xsl:if>
									<xsl:choose>
										<!--  Showing of inventory table also goes through the rules of DisplayOutOfStock appconfig if enabled..-->
										<xsl:when test="aspdnsf:AppConfigBool('ShowInventoryTable')='true'">
											<xsl:value-of select="aspdnsf:ShowInventoryTable(ProductID, VariantID)" disable-output-escaping="yes" />
										</xsl:when>
										<xsl:otherwise>
											<xsl:if test="aspdnsf:AppConfigBool('DisplayOutOfStockProducts') = 'true'">
												<xsl:value-of select="aspdnsf:DisplayProductStockHint(ProductID, VariantID, 'Product')" disable-output-escaping="yes" />
											</xsl:if>
										</xsl:otherwise>
									</xsl:choose>
									<div class="product-discounttable-wrap">
										<xsl:value-of select="aspdnsf:ShowQuantityDiscountTable(ProductID)" disable-output-escaping="yes" />
									</div>
									<xsl:value-of select="aspdnsf:EmailProductToFriend(ProductID)" disable-output-escaping="yes" />
                  <div class="product-add-this">
                    <xsl:value-of select="aspdnsf:Topic('0-product-add-this')" disable-output-escaping="yes"/>
                  </div>
								</div>
							</div>
						</div>
						<div class="product-description-wrap" itemprop="description">
							<div class="product-description-heading">
								<div class="description-heading">Description &amp; Specs</div>
							</div>
							<xsl:value-of select="$pDescription" disable-output-escaping="yes"/>
						</div>
						<xsl:if test="$showRatings = 'true'">
							<div class="product-ratings">
								<xsl:value-of select="aspdnsf:ProductRatings(ProductID, 0, 0, 0, 1)" disable-output-escaping="yes"/>
							</div>
						</xsl:if>

					</xsl:otherwise>
				</xsl:choose>
			</xsl:template>

			<xsl:template match="Promotion">
				<div class="promotion-call-to-action">
					<xsl:value-of select="CallToAction" disable-output-escaping="yes" />
				</div>
			</xsl:template>
		</xsl:stylesheet>
	</PackageTransform>
</package>